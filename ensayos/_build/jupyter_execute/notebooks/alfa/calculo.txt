!pip install matplotlib --upgrade

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 21, 2) 
b = 5
def f(x, b): return x*b
c = f(x, b)

fig, ax = plt.subplots(figsize=(10, 7))
ax.plot(x, c, marker='o', color='blue') 
plt.xticks(ticks=x)
ax.set_facecolor('black')
ax.set_xlabel('Valores de x')
ax.set_ylabel('Valores de c')
ax.hlines(y=10, xmin=0, xmax=2, linewidth=1, color='white', linestyles='dashed')
ax.vlines(x=2, ymin=0, ymax=10, linewidth=1, color='white', linestyles='dashed')
plt.show()

pendiente2 = (c[6] - c[3]) / (x[6] - x[3])

print(f'Valor de la pendiente 2: {pendiente2}')
fig, ax = plt.subplots(figsize=(10, 7))
ax.plot(x, c, marker='o', color='blue', label='recta de la función') 
plt.xticks(ticks=x)
ax.set_facecolor('black')
ax.set_xlabel('Valores de x')
ax.set_ylabel('Valores de c') 
ax.axline((x[6], c[6]), slope=pendiente2, color='green', label='pendiente 2') 
ax.hlines(y=10, xmin=0, xmax=2, linewidth=1, color='white', linestyles='dashed')
ax.vlines(x=2, ymin=0, ymax=10, linewidth=1, color='white', linestyles='dashed')
ax.legend()
plt.show()

def cuadratica(x): return x**2

c = cuadratica(x)

pendiente1 = (c[6] - c[5]) / (x[6] - x[5])
fig, ax = plt.subplots(figsize=(10, 7))
ax.plot(x, c, marker='o', color='blue', label='recta de la función') 
plt.xticks(ticks=x)
ax.set_facecolor('black')
ax.set_xlabel('Valores de x')
ax.set_ylabel('Valores de f(x)')
ax.axline((x[6], c[6]), slope=pendiente1, color='red', label='pendiente 1') 
ax.hlines(y=c[6], xmin=0, xmax=x[6], linewidth=1, color='white', linestyles='dashed')
ax.hlines(y=c[5], xmin=0, xmax=x[5], linewidth=1, color='white', linestyles='dashed')
ax.vlines(x=x[6], ymin=0, ymax=c[6], linewidth=1, color='white', linestyles='dashed')
ax.vlines(x=x[5], ymin=0, ymax=c[5], linewidth=1, color='white', linestyles='dashed')
ax.legend()
plt.show()

x = np.arange(0, 21, 2) 
b = 5
def f(x, b): return x*b
c = f(x, b)

fig, ax = plt.subplots(figsize=(10, 7))
ax.plot(x, c, marker='o', color='blue') 
plt.xticks(ticks=x)
ax.set_facecolor('black')
ax.set_xlabel('Valores de x')
ax.set_ylabel('Valores de c')
ax.hlines(y=c[3], xmin=x[3], xmax=x[6], linewidth=1, color='white', linestyles='dashed')
ax.vlines(x=x[3], ymin=0, ymax=c[3], linewidth=1, color='white', linestyles='dashed')
ax.vlines(x=x[6], ymin=0, ymax=c[6], linewidth=1, color='white', linestyles='dashed')
plt.show()
