import torch
import torch.nn.functional as F
from torch import nn
import numpy as np
import matplotlib.pyplot as plt

!wget https://github.com/DanteNoguez/CalculusRatiocinator/raw/main/data/nombres.txt

nombres = open('nombres.txt', 'r').read().splitlines()
nombres[:8]

len(nombres)

V = sorted(set(''.join(nombres)))
paf = {p:f+1 for f, p in enumerate(V)}
paf['.'] = 0
fap = {f:p for p,f in paf.items()}
print(fap)

nombres[:3]

block_size = 3 # longitud del contexto
def construir_dataset(nombres):
  X, Y = [], []
  for n in nombres:
    #print(f'nombre: {n}')
    contexto = [0] * block_size
    for c in n + '.':
      ix = paf[c]
      X.append(contexto)
      Y.append(ix)
      #print(''.join(fap[i] for i in contexto), '----> ', fap[ix])
      contexto = contexto[1:] + [ix]
  
  X = torch.tensor(X) # contexto
  Y = torch.tensor(Y) # objetivo
  return X, Y

construir_dataset(nombres[:3])

import random
random.shuffle(nombres)
n1 = int(0.8*len(nombres))
n2 = int(0.9*len(nombres))

Xtr, Ytr = construir_dataset(nombres[:n1])
Xdev, Ydev = construir_dataset(nombres[n1:n2])
Xte, Yte = construir_dataset(nombres[n2:])
X, Y = construir_dataset(nombres)

X.shape, Xtr.shape, Xdev.shape, Xte.shape

emb_dim = 10 # cada embedding tendrá 10 dimensiones
h = 200 # cada capa tendrá 200 unidades (hidden units)
vocab_size = len(fap) #tamaño del vocabulario

C = torch.randn(vocab_size, emb_dim) # tabla de consulta
H = torch.randn((emb_dim*block_size, h)) # pesos ocultos
d = torch.randn(h) # sesgos ocultos
U = torch.randn(h, vocab_size) # pesos de la segunda capa
b = torch.randn(vocab_size) # sesgos de la segunda capa

parametros = [C, H, d, U, b]

print(sum(p.nelement() for p in parametros)) # número total de parámetros
for p in parametros:
  p.requires_grad = True

max_steps = 10000 
batch_size = 32
paso_i = []
perdidas_i = []

for i in range(max_steps):
  #minibatch («minilote»)
  ix = torch.randint(0, Xtr.shape[0], (batch_size,))

  # propagación hacia delante
  emb = C[Xtr[ix]]
  a = torch.tanh(emb.view(-1, emb_dim*block_size) @ H + d)
  logits = a @ U + b
  perdida = F.cross_entropy(logits, Ytr[ix])
  
  # propagación hacia atrás
  for p in parametros:
    p.grad = None
  perdida.backward()

  # actualización
  lr = 0.1 if i < 5000 else 0.01
  for p in parametros:
    p.data += -lr * p.grad

  # registrar estadísticas
  paso_i.append(i)
  perdidas_i.append(perdida.item())

plt.plot(paso_i, perdidas_i);

@torch.no_grad() # decorador
def perdida_split(split):
  x,y = {'train': (Xtr, Ytr),
         'val': (Xdev, Ydev),
         'test': (Xte, Yte)}[split]
  emb = C[x]
  a = torch.tanh(emb.view(-1, emb_dim*block_size) @ H + d)
  logits = a @ U + b
  perdida = F.cross_entropy(logits, y)
  print(split, perdida.item())

perdida_split('train')
perdida_split('val')
perdida_split('test')

-torch.tensor(1/27.0).log() # negative log likelihood

logits_ej = torch.randn(4)
probs_ej = torch.softmax(logits_ej, dim=0)
perdida_ej = -probs_ej[2].log()

logits_ej, probs_ej, perdida_ej

logits_ej = torch.randn(4) * 10 # multiplicamos por 10 los logits
probs_ej = torch.softmax(logits_ej, dim=0)
perdida_ej = -probs_ej[2].log()

logits_ej, probs_ej, perdida_ej

C = torch.randn(vocab_size, emb_dim) # tabla de consulta
H = torch.randn((emb_dim*block_size, h)) # pesos ocultos
d = torch.randn(h) # sesgos ocultos

U = torch.randn(h, vocab_size) * 0.01 # pesos de la segunda capa
b = torch.randn(vocab_size) * 0.0 # sesgos de la segunda capa

parametros = [C, H, d, U, b]
for p in parametros:
  p.requires_grad = True

max_steps = 10000 
batch_size = 32
paso_i = []
perdidas_i = []

for i in range(max_steps):
  #minibatch («minilote»)
  ix = torch.randint(0, Xtr.shape[0], (batch_size,))

  # propagación hacia delante
  emb = C[Xtr[ix]]
  a = torch.tanh(emb.view(-1, emb_dim*block_size) @ H + d)
  logits = a @ U + b
  perdida = F.cross_entropy(logits, Ytr[ix])
  
  # propagación hacia atrás
  for p in parametros:
    p.grad = None
  perdida.backward()

  # actualización
  lr = 0.1 if i < 5000 else 0.01
  for p in parametros:
    p.data += -lr * p.grad

  # registrar estadísticas
  paso_i.append(i)
  perdidas_i.append(perdida.item())

plt.plot(paso_i, perdidas_i);

perdida_split('train')
perdida_split('val')
perdida_split('test')

plt.hist(a.view(-1).tolist(), 50);

plt.hist((emb.view(-1, emb_dim*block_size) @ H + d).view(-1).tolist(), 50);

plt.figure(figsize=(20,10))
plt.imshow(a.abs() > 0.99, cmap='gray', interpolation='nearest')

C = torch.randn(vocab_size, emb_dim) # tabla de consulta
H = torch.randn((emb_dim*block_size, h)) * 0.3 # pesos ocultos
d = torch.randn(h) * 0.01 # sesgos ocultos
U = torch.randn(h, vocab_size) * 0.01 # pesos de la segunda capa
b = torch.randn(vocab_size) * 0.0

parametros = [C, H, d, U, b]
for p in parametros:
  p.requires_grad = True

for i in range(max_steps):
  #minibatch («minilote»)
  ix = torch.randint(0, Xtr.shape[0], (batch_size,))

  # propagación hacia delante
  emb = C[Xtr[ix]]
  a = torch.tanh(emb.view(-1, emb_dim*block_size) @ H + d)
  logits = a @ U + b
  perdida = F.cross_entropy(logits, Ytr[ix])
  
  # propagación hacia atrás
  for p in parametros:
    p.grad = None
  perdida.backward()

  # actualización
  lr = 0.1 if i < 5000 else 0.01
  for p in parametros:
    p.data += -lr * p.grad

perdida_split('train')
perdida_split('val')
perdida_split('test')

plt.figure(figsize=(20,10))
plt.imshow(a.abs() > 0.99, cmap='gray', interpolation='nearest')

(5/3) / 30**0.5 # elevar a 0.5 es equivalente a obtener la raíz cuadrada

x = torch.randn(1000, 10)
w = torch.randn(10, 200)
y = x @ w
print(x.mean(), x.std())
print(y.mean(), y.std())
plt.figure(figsize=(20,5))
plt.subplot(121)
plt.hist(x.view(-1).tolist(), 50, density=True);
plt.subplot(122)
plt.hist(y.view(-1).tolist(), 50, density=True);

x = torch.randn(1000, 10)
w = torch.randn(10, 200) * 1 / 10**0.5
y = x @ w
print(x.mean(), x.std())
print(y.mean(), y.std())
plt.figure(figsize=(20,5))
plt.subplot(121)
plt.hist(x.view(-1).tolist(), 50, density=True);
plt.subplot(122)
plt.hist(y.view(-1).tolist(), 50, density=True);

C = torch.randn(vocab_size, emb_dim) # tabla de consulta
H = torch.randn((emb_dim*block_size, h)) * 0.3 # pesos ocultos
#d = torch.randn(h) * 0.01 # sesgos ocultos
U = torch.randn(h, vocab_size) * 0.01 # pesos de la segunda capa
b = torch.randn(vocab_size) * 0.0

bngain = torch.ones((1, h)) # gamma
bnbias = torch.zeros((1, h)) # beta
bnmean_running = torch.zeros((1, h))
bnstd_running = torch.ones((1, h))

parametros = [C, H, U, b, bngain, bnbias]
for p in parametros:
  p.requires_grad = True

for i in range(max_steps):
  #minibatch («minilote»)
  ix = torch.randint(0, Xtr.shape[0], (batch_size,))

  # propagación hacia delante
  emb = C[Xtr[ix]]
  pre_a = emb.view(-1, emb_dim*block_size) @ H #+ d
  # BatchNorm
  # -----
  bnmean_i = pre_a.mean(0, keepdim=True)
  bnstd_i =  pre_a.std(0, keepdim=True)
  pre_a = bngain * (pre_a - bnmean_i) / bnstd_i + bnbias
  with torch.no_grad():
    bnmean_running = 0.999 * bnmean_running + 0.001 * bnmean_i
    bnstd_running = 0.999 * bnstd_running + 0.001 * bnstd_i 
  # -----
  a = torch.tanh(pre_a)
  logits = a @ U + b
  perdida = F.cross_entropy(logits, Ytr[ix])
  
  # propagación hacia atrás
  for p in parametros:
    p.grad = None
  perdida.backward()

  # actualización
  lr = 0.1 if i < 5000 else 0.01
  for p in parametros:
    p.data += -lr * p.grad

@torch.no_grad() # decorador
def perdida_split(split):
  x,y = {'train': (Xtr, Ytr),
         'val': (Xdev, Ydev),
         'test': (Xte, Yte)}[split]
  emb = C[x]
  pre_a = emb.view(-1, emb_dim*block_size) @ H + d
  pre_a = bngain * (pre_a - bnmean_running) / bnstd_running + bnbias
  a = torch.tanh(pre_a)
  logits = a @ U + b
  perdida = F.cross_entropy(logits, y)
  print(split, perdida.item())

perdida_split('train')
perdida_split('val')
perdida_split('test')

class Linear:
  
  def __init__(self, fan_in, fan_out, bias=True):
    self.weight = torch.randn((fan_in, fan_out)) / fan_in**0.5
    self.bias = torch.zeros(fan_out) if bias else None
  
  def __call__(self, x):
    self.out = x @ self.weight
    if self.bias is not None:
      self.out += self.bias
    return self.out
  
  def parameters(self):
    return [self.weight] + ([] if self.bias is None else [self.bias])


class BatchNorm1d:
  
  def __init__(self, dim, eps=1e-5, momentum=0.1):
    self.eps = eps
    self.momentum = momentum
    self.training = True
    # parameters (trained with backprop)
    self.gamma = torch.ones(dim)
    self.beta = torch.zeros(dim)
    # buffers (trained with a running 'momentum update')
    self.running_mean = torch.zeros(dim)
    self.running_var = torch.ones(dim)
  
  def __call__(self, x):
    # calculate the forward pass
    if self.training:
      xmean = x.mean(0, keepdim=True) # batch mean
      xvar = x.var(0, keepdim=True) # batch variance
    else:
      xmean = self.running_mean
      xvar = self.running_var
    xhat = (x - xmean) / torch.sqrt(xvar + self.eps) # normalize to unit variance
    self.out = self.gamma * xhat + self.beta
    # update the buffers
    if self.training:
      with torch.no_grad():
        self.running_mean = (1 - self.momentum) * self.running_mean + self.momentum * xmean
        self.running_var = (1 - self.momentum) * self.running_var + self.momentum * xvar
    return self.out
  
  def parameters(self):
    return [self.gamma, self.beta]

class Tanh:
  def __call__(self, x):
    self.out = torch.tanh(x)
    return self.out
  def parameters(self):
    return []

emb_dim = 10 # cada embedding tendrá 10 dimensiones
block_size = 3
h = 200 # cada capa tendrá 200 unidades (hidden units)
vocab_size = len(fap) #tamaño del vocabulario

C = torch.randn(vocab_size, emb_dim) # tabla de consulta
layers = [
    Linear(emb_dim * block_size, h, bias=False), BatchNorm1d(h), Tanh(),
    Linear(h, h, bias=False), BatchNorm1d(h), Tanh(),
    Linear(h, h, bias=False), BatchNorm1d(h), Tanh(),
    Linear(h, vocab_size, bias=False), BatchNorm1d(vocab_size),
]

with torch.no_grad():
  layers[-1].gamma *= 0.1
  for layer in layers[:-1]:
    if isinstance(layer, Linear):
      layer.weight *= 1.0

parameters = [C] + [p for layer in layers for p in layer.parameters()]
print(sum(p.nelement() for p in parameters))
for p in parameters:
  p.requires_grad = True

perdida_i = []
ud = []
max_steps = 10000

for i in range(max_steps):
  #minibatch («minilote»)
  ix = torch.randint(0, Xtr.shape[0], (batch_size,))

  # propagación hacia delante
  emb = C[Xtr[ix]]
  x = emb.view(emb.shape[0], -1)
  for layer in layers:
    x = layer(x)
  perdida = F.cross_entropy(x, Ytr[ix])
  
  # propagación hacia atrás
  for layer in layers:
    layer.out.retain_grad()
  for p in parameters:
    p.grad = None
  perdida.backward()

  # actualización
  lr = 0.1 if i < 5000 else 0.01
  for p in parametros:
    p.data += -lr * p.grad

  # estadísticas
  if i % 1000 == 0: # print every once in a while
    print(f'{i:7d}/{max_steps:7d}: {perdida.item():.4f}')
  perdidas_i.append(perdida.log10().item())
  with torch.no_grad():
    ud.append([((lr*p.grad).std() / p.data.std()).log10().item() for p in parameters])

block_size = 3
for _ in range(20):
  out = []
  context = [0] * block_size
  while True:
    emb = C[torch.tensor([context])]
    a = torch.tanh(emb.view(1, -1) @ H + d)
    logits = a @ U + b
    probs = F.softmax(logits, dim=1)
    ix = torch.multinomial(probs, num_samples=1).item()
    context = context[1:] + [ix]
    out.append(ix)
    if ix == 0:
      break

  print(''.join(fap[i] for i in out))
